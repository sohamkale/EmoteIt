Index: server/controllers/EmortionController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {EmortionEngine} from \"../models/EmortionSchema.js\";\r\nimport {InsightEngine} from \"../models/InsightSchema.js\";\r\nimport mongoose from \"mongoose\";\r\nimport {CreateNotification, GetUserFromToken} from \"./UserController.js\";\r\nimport {ObjectId} from \"../config.js\";\r\nimport {FriendshipSchema} from \"../models/FriendshipSchema.js\";\r\nimport {UserEngine} from \"../models/UserSchema.js\";\r\nimport {response} from \"express\";\r\n\r\n\r\n//EMORTION START\r\nexport function CreateEmortion(req, res) {\r\n    let _emortion = req.body;\r\n\r\n    // idToken comes from the client app\r\n    const token = req.get(\"access-token\");\r\n    if (token == null) {\r\n        res.status(401).send({message: \"no user token\"});\r\n        return;\r\n    }\r\n\r\n    GetUserFromToken(token)\r\n        .then((loggedInUser) => {\r\n                if (!loggedInUser) {\r\n                    res.status(401).send({message: 'logged in user not retrieved'});\r\n                    return;\r\n                }\r\n                const timeNow = new Date();\r\n                _emortion.createdBy = loggedInUser._id;\r\n                const _expireOpt = _emortion.expireOpt;\r\n                let _expireHours = _expireOpt == 1 ? 3 : _expireOpt == 2 ? 24 : 1; // 0 =1 hour, 1= 3 hours and 2= 24 hours. default = 1 hour\r\n                _emortion.expiresAt = new Date(new Date().setHours(timeNow.getHours() + _expireHours));\r\n                //note: expire-time is expected from the front end! depending on what is selected\r\n                let newEmortion = new EmortionEngine(_emortion);\r\n                newEmortion.save().then((addedEmortion) => {\r\n                    res.send(addedEmortion);\r\n                }).catch((err) => {\r\n                        console.log(`error adding emortion: ${err}`);\r\n                        res.status(500).send(err);\r\n                    }\r\n                )\r\n            }\r\n        ).catch((err) => {\r\n            console.log(`token user error: ${err}`);\r\n            res.status(500).send(err);\r\n        }\r\n    )\r\n}\r\n\r\nexport function GetEmortion(req, res) {\r\n    //get logged in user\r\n    const token = req.get('access-token');\r\n    if (!token) {\r\n        res.status(401).send('no token provided');\r\n        return;\r\n    }\r\n    GetUserFromToken(token)\r\n        .then((loggedInUser) => {\r\n            if (!loggedInUser) {\r\n                res.status(401).send({message: 'logged in user not retrieved'});\r\n                return;\r\n            }\r\n\r\n            EmortionEngine.findById(req.params.id)\r\n                .populate(['createdBy', 'reactionIds'],)\r\n                .then(async (emortion) => {\r\n                    if (!emortion) {\r\n                        res.status(404).send({message: 'object not retrieved'});\r\n                        return;\r\n                    }\r\n\r\n                    const revealed = await IsEmortionRevealed(emortion._id, loggedInUser._id);\r\n                    if (!revealed) {\r\n                        //remove secret\r\n                        emortion.secret = null\r\n                    }\r\n                    res.send(emortion);\r\n                }).catch((err) => {\r\n                    console.log(`error adding emortion: ${err}`);\r\n                    res.status(500).send(err);\r\n                }\r\n            )\r\n        })\r\n        .catch((err) => {\r\n                console.log(`token user error: ${err}`);\r\n                res.status(500).send(err);\r\n            }\r\n        );\r\n\r\n}\r\n\r\nexport function GetUserEmortions(req, res) {\r\n\r\n    EmortionEngine.find({createdBy: new ObjectId(req.params.id)},\r\n        async (err, emortions) => {\r\n            if (err) {\r\n                console.log(err)\r\n                res.send(err)\r\n            } else {\r\n                //get the createdBy user of emortion\r\n                for (const item of emortions) {\r\n                    item.createdBy = await GetProfileById(item.createdBy);\r\n                    //get the logged in user\r\n                    const tokenUser = await GetUserFromToken(req.get(\"access-token\"));\r\n                    if (tokenUser == null) {\r\n                        res.status(401).send('no access token');//\r\n                        return;\r\n                    }\r\n\r\n\r\n                    const isRevealed = await IsEmortionRevealed(item._id, tokenUser?._id);\r\n                    if (!isRevealed)\r\n                        item.secret = null;\r\n                }\r\n\r\n                res.send(emortions);\r\n            }\r\n        }).sort({createdAt: -1}).limit(req.query.limit)\r\n}\r\n\r\nexport async function ReactEmortion(req, res) {\r\n    //get logged in user\r\n    const token = req.get('access-token');\r\n    if (!token) {\r\n        res.status(401).send('no token provided');\r\n        return;\r\n    }\r\n    GetUserFromToken(token)\r\n        .then((loggedInUser) => {\r\n            if (!loggedInUser) {\r\n                res.status(401).send({message: 'logged in user not retrieved'});\r\n                return;\r\n            }\r\n            EmortionEngine.findById(req.params.id).then((emortion) => {\r\n                if (!emortion) {\r\n                    res.status(404).send({message: 'object not retrieved'});\r\n                    return;\r\n                }\r\n                if (emortion.reactionIds.includes(loggedInUser?._id.toString())) {\r\n                    //remove it\r\n                    EmortionEngine.findByIdAndUpdate(req.params.id, {$pull: {reactionIds: loggedInUser?._id}}, {new: true})\r\n                        .then((updated) => {\r\n                            res.send(updated);\r\n                        }).catch((err) => {\r\n                            console.log(`error reacting emortion: ${err}`);\r\n                            res.status(500).send(err);\r\n                        }\r\n                    )\r\n                } else {\r\n                    EmortionEngine.findByIdAndUpdate(req.params.id, {$push: {reactionIds: loggedInUser?._id}}, {new: true})\r\n                        .then((updated) => {\r\n                            //add notification to user\r\n\r\n                            res.send(updated);\r\n                            CreateNotification(`${loggedInUser?.name} reacted to your emortion`,\r\n                                emortion.createdBy,`emortion/${emortion?._id}`)   }).catch((err) => {\r\n                            console.log(`error reacting emortion: ${err}`);\r\n                            res.status(500).send(err);\r\n                        }\r\n                    )\r\n                }\r\n            })\r\n        })\r\n        .catch((err) => {\r\n                console.log(`token user error: ${err}`);\r\n                res.status(500).send(err);\r\n            }\r\n        );\r\n}\r\n\r\nexport async function IsEmortionRevealed(emortionID, userId) {\r\n    const emortion = await EmortionEngine.findById(emortionID).exec();\r\n\r\n    if (!emortion) {\r\n        return false\r\n    }\r\n\r\n    if (emortion.createdBy.toString() === userId.toString()) {\r\n        return true\r\n    }\r\n    if (emortion.expiresAt < new Date()) {\r\n        return true\r\n    }\r\n    /*for (let i = 0; i < emortion.insightUIds.length; i++) {\r\n        InsightArray.push(emortion.insightUIds[i]);\r\n    }*/\r\n    if (emortion?.insightUIds.includes(userId)) {\r\n        return true\r\n    }\r\n    return false\r\n\r\n}\r\n\r\n//EMORTION END\r\n\r\n\r\n//INSIGHT START\r\nexport function StartInsight(req, res) {\r\n    let exists = false;\r\n    // token comes from the client app\r\n    const token = req.get(\"access-token\");\r\n    if (token == null) {\r\n        res.status(401).send({message: \"no user token\"});\r\n        return;\r\n    }\r\n    GetUserFromToken(token)\r\n        .then((loggedInUser) => {\r\n            if (!loggedInUser) {\r\n                res.status(401).send({message: 'logged in user not retrieved'});\r\n                return;\r\n            }\r\n            EmortionEngine.findById({_id: req.params.id})\r\n                .then((emortion) => {\r\n                    if (!emortion) {\r\n                        res.status(404).send({message: 'object not retrieved'});\r\n                        return;\r\n                    }\r\n\r\n                    let currentDateTime = new Date();\r\n                    if (currentDateTime > emortion.expiresAt) {\r\n                        res.status(403).send({message: \"emortion expired!\"})\r\n                        return;\r\n                    }\r\n\r\n                    if (emortion.insightUIds.includes(loggedInUser?._id)) {\r\n                        exists = true;\r\n                    }\r\n                    if (exists === true) {\r\n                        // run insight engine return insight\r\n                        InsightEngine.findOne({$and: [{createdBy: loggedInUser?._id}, {emortionId: emortion._id}]})\r\n                            .then((insight) => {\r\n                                if (!insight) {\r\n                                    res.status(404).send({message: 'object not retrieved'});\r\n                                    return;\r\n                                }\r\n                                res.send(insight);\r\n                                return;\r\n                            })\r\n                    } else {\r\n                        // run insight engine create insight\r\n                        let _responseString = [];\r\n                        const split = emortion.secret?.split(' ');\r\n\r\n                        for (let sIndex = 0; sIndex < split?.length; sIndex++) {\r\n                            let filler = \"_\";\r\n                            filler = filler.repeat(split[sIndex].length);\r\n                            _responseString.push(filler);\r\n                        }\r\n\r\n                        // show 3 radnom letters\r\n                        for (let i = 0; i < 3; i++) {\r\n                            const _randomWordIndex = randomInt(0, _responseString.length-1);\r\n                            let _word = _responseString[_randomWordIndex];\r\n                            const _randomCharIndex = randomInt(0,_word.length-1);\r\n                            // console.log(`${_randomWordIndex}, ${_randomCharIndex}`)\r\n                            _word = _word.substring(0, _randomCharIndex) + split[_randomWordIndex][_randomCharIndex] + _word.substring(_randomCharIndex + 1);\r\n                            _responseString[_randomWordIndex] = _word;\r\n                        }\r\n\r\n                        const insight = {\r\n                            createdBy: loggedInUser?._id,\r\n                            secret: emortion.secret,\r\n                            accuracy: 0,\r\n                            score: 0,\r\n                            hintsTaken: 0,\r\n                            response: _responseString,\r\n                            emortionId: emortion._id,\r\n                        }\r\n                        let newInsight = new InsightEngine(insight)\r\n                        newInsight.save()\r\n                            .then((addedInsight) => {\r\n                                EmortionEngine.findOneAndUpdate({_id: req.params.id}, {$push: {insightUIds: loggedInUser?._id.toString()}}, {new: true})\r\n                                    .then((xres) => {\r\n                                        res.send(addedInsight);\r\n                                    })\r\n                                    .catch((err) => {\r\n                                            console.log(`error adding insight: ${err}`);\r\n                                            res.status(500).send(err);\r\n                                        }\r\n                                    )\r\n\r\n                            })\r\n                            .catch((err) => {\r\n                                    console.log(`error adding insight: ${err}`);\r\n                                    res.status(500).send(err);\r\n                                }\r\n                            )\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                        console.log(`error starting insight: ${err}`);\r\n                        res.status(500).send(err);\r\n                    }\r\n                )\r\n        })\r\n        .catch((err) => {\r\n            console.log(`token user error: ${err}`);\r\n            res.status(500).send(err);\r\n        })\r\n}\r\n\r\nfunction randomInt(min, max) { // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nexport function TakeHint(req, res) {\r\n    InsightEngine.findById(req.params.id).then((insight) => {\r\n        if (!insight) {\r\n            res.status(404).send({message: 'object not retrieved'});\r\n            return;\r\n        }\r\n        insight.hintsTaken = 4;\r\n        const _split = insight.secret.split(' ');\r\n        let _responseArray = [];\r\n        for (let sIndex = 0; sIndex < _split?.length; sIndex++) {\r\n            let filler = \"_\";\r\n            filler = filler.repeat(_split[sIndex].length);\r\n            _responseArray.push(filler);\r\n        }\r\n        for (let i = 0; i < insight.secret.length / 2; i++) {\r\n            const _randomWordIndex = randomInt(0, _responseArray.length-1);\r\n            let _word = _responseArray[_randomWordIndex];\r\n            const _randomCharIndex = randomInt(0,_word.length-1);\r\n            // console.log(`${_randomWordIndex}, ${_randomCharIndex}`)\r\n            _word = _word.substring(0, _randomCharIndex) + _split[_randomWordIndex][_randomCharIndex] + _word.substring(_randomCharIndex + 1);\r\n            _responseArray[_randomWordIndex] = _word;\r\n        }\r\n        // console.log(_responseArray);\r\n        insight.response = _responseArray;\r\n        InsightEngine.findByIdAndUpdate(insight._id, insight, {new:true})\r\n            .then((updated)=>{\r\n                // console.log(updated)\r\n                res.send(updated)\r\n            })\r\n    })\r\n}\r\n\r\nexport async function SubmitEmortionInsight(req, res) {\r\n\r\n    // idToken comes from the client app\r\n    const token = req.get(\"access-token\");\r\n    if (token == null) {\r\n        res.status(401).send({message: \"no user token\"});\r\n        return;\r\n    }\r\n\r\n    let matchCounter = 0;\r\n    let answerNumber = 0;\r\n    let timeSubtract = 0;\r\n    let subtractAnswerRank = 0;\r\n    let finalScore = 0;\r\n    let response = req.body.response\r\n    let secret = req.body.secret?.split(' ');\r\n    let startTime;\r\n\r\n    for (let i = 0; i < response.length; i++) {\r\n        if (response[i].toLowerCase() === secret[i].toLowerCase()) {\r\n            matchCounter++;\r\n        }\r\n    }\r\n\r\n    GetUserFromToken(token)\r\n        .then((loggedInUser) => {\r\n            if (!loggedInUser) {\r\n                res.status(401).send({message: 'logged in user not retrieved'});\r\n                return;\r\n            }\r\n\r\n            // Get answer number\r\n            EmortionEngine.findById(req.params.id)\r\n                .then((emortion) => {\r\n                    if (!emortion) {\r\n                        res.status(404).send({message: 'object not retrieved'});\r\n                        return;\r\n                    }\r\n                    answerNumber = emortion?.insightUIds?.length\r\n                    subtractAnswerRank = (answerNumber - 1) * 2;\r\n\r\n                    //get start time\r\n                    InsightEngine.findOne({$and: [{createdBy: loggedInUser?._id}, {emortionId: req.params.id}]})\r\n                        .then((insight) => {\r\n                            if (!insight) {\r\n                                res.status(404).send({message: 'object not retrieved'});\r\n                                return;\r\n                            }\r\n\r\n                            startTime = insight.createdAt\r\n                            let currTime = new Date()\r\n                            let timeDifferential = Math.abs(currTime - startTime)\r\n\r\n                            if (timeDifferential > 63000) {\r\n                                res.status(500).send({message: \"emortion expired\"});\r\n                                return;\r\n                            }\r\n\r\n                            if (timeDifferential >= 10000) {\r\n                                timeSubtract = 5;\r\n                            }\r\n                            if (timeDifferential >= 20000) {\r\n                                timeSubtract = 10;\r\n                            }\r\n                            if (timeDifferential >= 30000) {\r\n                                timeSubtract = 15;\r\n                            }\r\n                            if (timeDifferential >= 40000) {\r\n                                timeSubtract = 20;\r\n                            }\r\n                            if (timeDifferential >= 50000) {\r\n                                timeSubtract = 25;\r\n                            }\r\n                            if (timeDifferential === 55000) {\r\n                                timeSubtract = 30;\r\n                            }\r\n\r\n                            finalScore = (matchCounter * 10) + (10) - (subtractAnswerRank) + (30) - (timeSubtract);\r\n                            finalScore -= (insight.hintsTaken * 5); // each hint taken deduct 5 points\r\n                            let returnObj = {\r\n                                score: finalScore,\r\n                                submittedAt: currTime,\r\n                                response: req.body.response,\r\n                                accuracy: matchCounter / secret.length,\r\n                                timeTaken: timeDifferential\r\n                            }\r\n                            InsightEngine.findByIdAndUpdate(insight._id.toString(), returnObj, {new: true})\r\n                                .then((updated) => {\r\n\r\n                                    //add the score to the user\r\n                                    UserEngine.findByIdAndUpdate(loggedInUser?._id, {\r\n                                        $inc: {\r\n                                            score: finalScore,\r\n                                            totalAnswerTimeMs: timeDifferential\r\n                                        }\r\n                                    }, {new: true})\r\n                                        .then((finalUpdate) => {\r\n                                            CreateNotification(`${loggedInUser?.name} submitted insight to your emortion`,\r\n                                                emortion.createdBy,`emortion/${emortion?._id}`)\r\n                                            res.send(finalUpdate);\r\n                                        })\r\n                                        .catch((err) => {\r\n                                                console.log(`error submitting insight: ${err}`);\r\n                                                res.status(500).send(err);\r\n                                            }\r\n                                        )\r\n                                })\r\n                                .catch((err) => {\r\n                                        console.log(`error submitting insight: ${err}`);\r\n                                        res.status(500).send(err);\r\n                                    }\r\n                                )\r\n                        })\r\n                        .catch((err) => {\r\n                                console.log(`error submitting insight: ${err}`);\r\n                                res.status(500).send(err);\r\n                            }\r\n                        )\r\n                })\r\n                .catch((err) => {\r\n                        console.log(`error submitting insight: ${err}`);\r\n                        res.status(500).send(err);\r\n                    }\r\n                )\r\n        })\r\n        .catch((err) => {\r\n            console.log(`token user error: ${err}`);\r\n            res.status(500).send(err);\r\n        })\r\n}\r\n\r\nexport function GetInsightsOfEmortion(req, res) {\r\n    const token = req.get('access-token');\r\n    if (!token) {\r\n        res.status(401).send('no token provided');\r\n        return;\r\n    }\r\n    GetUserFromToken(token)\r\n        .then((loggedInUser) => {\r\n            if (!loggedInUser) {\r\n                res.status(401).send({message: 'logged in user not retrieved'});\r\n                return;\r\n            }\r\n            InsightEngine.find({$and:[{emortionId: new ObjectId(req.params.id)},{submittedAt:{$ne:null}}]}).limit(req.query.limit).populate(['createdBy', 'reactionIds'])\r\n                .then(async (insights) => {\r\n                    if (!insights) {\r\n                        res.status(404).send({message: 'object not retrieved'});\r\n                        return;\r\n                    }\r\n                    const revealed = await IsEmortionRevealed(req.params.id, loggedInUser?._id);\r\n                   console.log(insights)\r\n                    if (!revealed) {\r\n                        res.send([]);\r\n                        return;\r\n                    }\r\n                    res.send(insights);\r\n                })\r\n                .catch((err) => {\r\n                        console.log(`error obtaining insights of emortion: ${err}`);\r\n                        res.status(500).send(err);\r\n                    }\r\n                )\r\n        }).catch((err) => {\r\n            console.log(`token user error: ${err}`);\r\n            res.status(500).send(err);\r\n        }\r\n    );\r\n}\r\n\r\nexport async function ReactInsight(req, res) {\r\n    const token = req.get(\"access-token\");\r\n    if (token == null) {\r\n        res.status(401).send({message: \"no user token\"});\r\n        return;\r\n    }\r\n\r\n    GetUserFromToken(token)\r\n        .then((loggedInUser) => {\r\n            if (!loggedInUser) {\r\n                res.status(401).send({message: 'logged in user not retrieved'});\r\n                return;\r\n            }\r\n\r\n            InsightEngine.findById(req.params.id).then((insight) => {\r\n                if (insight.reactionIds.includes(loggedInUser?._id.toString())) {\r\n                    //remove it\r\n                    InsightEngine.findByIdAndUpdate(req.params.id, {$pull: {reactionIds: loggedInUser?._id}}, {new: true})\r\n                        .then((updated) => {\r\n                            res.send(updated);\r\n                            return;\r\n                        })\r\n                        .catch((err) => {\r\n                                console.log(`error reacting insight: ${err}`);\r\n                                res.status(500).send(err);\r\n                            }\r\n                        )\r\n                } else {\r\n                    InsightEngine.findByIdAndUpdate(req.params.id, {$push: {reactionIds: loggedInUser?._id}}, {new: true})\r\n                        .then((updated) => {\r\n                            CreateNotification(`${loggedInUser?.name} reacted to your insight`,\r\n                                insight.createdBy,`emortion/${insight?.emortionId}`)\r\n                            res.send(updated);\r\n                            return;\r\n                        })\r\n                        .catch((err) => {\r\n                                console.log(`error reacting insight: ${err}`);\r\n                                res.status(500).send(err);\r\n                            }\r\n                        )\r\n                }\r\n            })\r\n        })\r\n        .catch((err) => {\r\n                console.log(`token user error: ${err}`);\r\n                res.status(500).send(err);\r\n            }\r\n        )\r\n\r\n\r\n}\r\n\r\n//INSIGHT END\r\n\r\n//end of emortion controller\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/controllers/EmortionController.js b/server/controllers/EmortionController.js
--- a/server/controllers/EmortionController.js	(revision 8af94ee4f483ab362023a18057da2f7342f6649b)
+++ b/server/controllers/EmortionController.js	(date 1659332726218)
@@ -89,35 +89,6 @@
 
 }
 
-export function GetUserEmortions(req, res) {
-
-    EmortionEngine.find({createdBy: new ObjectId(req.params.id)},
-        async (err, emortions) => {
-            if (err) {
-                console.log(err)
-                res.send(err)
-            } else {
-                //get the createdBy user of emortion
-                for (const item of emortions) {
-                    item.createdBy = await GetProfileById(item.createdBy);
-                    //get the logged in user
-                    const tokenUser = await GetUserFromToken(req.get("access-token"));
-                    if (tokenUser == null) {
-                        res.status(401).send('no access token');//
-                        return;
-                    }
-
-
-                    const isRevealed = await IsEmortionRevealed(item._id, tokenUser?._id);
-                    if (!isRevealed)
-                        item.secret = null;
-                }
-
-                res.send(emortions);
-            }
-        }).sort({createdAt: -1}).limit(req.query.limit)
-}
-
 export async function ReactEmortion(req, res) {
     //get logged in user
     const token = req.get('access-token');
Index: server/models/InsightSchema.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mongoose from \"mongoose\";\r\nimport {ObjectId} from \"../config.js\";\r\nimport {UserTableName} from \"./UserSchema.js\";\r\nconst Schema  = mongoose.Schema;\r\nexport const InsightTableName = \"Insight\";\r\n\r\n\r\nexport const InsightSchema = new Schema({\r\n    createdBy: {type:ObjectId, ref: UserTableName},\r\n    secret: String,\r\n    accuracy: Number,\r\n    score: Number,\r\n    response: [String],\r\n    hintsTaken: Number,\r\n    timeTaken: Number,\r\n    submittedAt: Date,\r\n    deviceId: Number,\r\n    emortionId: String,\r\n    reactionIds: [String],\r\n    deprecated: false,\r\n}, { id: true,  timestamps: true }\r\n);\r\n\r\nexport const InsightEngine = mongoose.model(InsightTableName, InsightSchema);\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/models/InsightSchema.js b/server/models/InsightSchema.js
--- a/server/models/InsightSchema.js	(revision 8af94ee4f483ab362023a18057da2f7342f6649b)
+++ b/server/models/InsightSchema.js	(date 1659331000847)
@@ -1,6 +1,7 @@
 import mongoose from "mongoose";
 import {ObjectId} from "../config.js";
 import {UserTableName} from "./UserSchema.js";
+import {EmortionTableName} from "./EmortionSchema.js";
 const Schema  = mongoose.Schema;
 export const InsightTableName = "Insight";
 
@@ -15,8 +16,8 @@
     timeTaken: Number,
     submittedAt: Date,
     deviceId: Number,
-    emortionId: String,
-    reactionIds: [String],
+    emortionId: {type:ObjectId, ref: EmortionTableName},
+    reactionIds: [{type:ObjectId, ref: UserTableName}],
     deprecated: false,
 }, { id: true,  timestamps: true }
 );
